#!/bin/bash
#
# This script tears down strings infrastructure only if the proper files
# exist in /tmp/strings.  Useful during testing only, as those files tend
# to go away after the infrastructure is cleaned up.
#

# Validate configuration
if [ ! -f configuration.bash ]; then
  echo ">>> You must setup configuration.bash!"
  exit 1
else
  source configuration.bash
  echo ">>> Using the following configuration: "
  echo
  echo "    Top Level Domain: $top_level_domain"
  echo "    Data Center: $data_center"
  echo
  echo "    OpenStack Username: $os_username"
  echo "    OpenStack API Key: ********************************"
  echo "    OpenStack Region: $os_region"
  echo
  echo "    Kill top level DNS zone on teardown?: $dns_kill_top_zone"
  echo
fi

# Source in shared functions
source shared.bash

# Check if we're already running
checkRunning

# Install packages
installDependencies

# Generate output directory
output_directory=$(getOutputDirectory)

# Check output directory
if [ ! -d "$1" ]; then
  echo ">>> You must specify a strings output directory (ie: /tmp/strings.11485)"
  finishRunning
  exit 1
fi

# Sleeping
echo "*** We will run a process that WILL cause some damage... 5 seconds to CTRL-C!"
sleep 5

# Kill Infrastructure
echo ">>> Killing infrastructure..."
for server in "$1"/*.txt; do
  id=$(novaValueByKey id "$server")
  name=$(novaValueByKey name "$server")
  echo ">>> Killing $name..."
  novaExecute delete "$id"
done

# Kill DNS
echo ">>> Killing DNS..."
for server in "$1"/*.txt; do
  name=$(novaValueByKey name "$server")
  id=$(dnsExecute record-list "$top_level_domain" | dnsIdByName "$name")
  echo ">>> Killing $name..."
  dnsExecute record-delete --record_id "$id" "$top_level_domain"
done

# Kill Zone?
if [ "$dns_kill_top_zone" -eq 1 ]; then
  dnsExecute domain-delete "$top_level_domain"
fi

# Exit
echo ">>> Infrastructure and DNS killed."
finishRunning
exit 0
